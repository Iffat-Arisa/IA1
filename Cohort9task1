# Task 1
def numbers_less_k(ele, K):
return len([idx for idx in range(1, ele + 1) if ele % idx == 0]) <= K
test_list = [60, 12, 100, 17, 18]
print("The original list is : " + str(test_list))
K = 4
res = list(filter(lambda ele: numbers_less_k(ele, K), test_list))
print("Filtered elements : " + str(res))

# Quantum Circuit
import qiskit
class QuantumCircuit:
def __init__(self, n_qubits, backend, shots):
self._circuit = qiskit.QuantumCircuit(n_qubits)
all_qubits = [i for i in range(n_qubits)]
self.theta = qiskit.circuit.Parameter('theta')
self._circuit.h(all_qubits)
self._circuit.barrier()
self._circuit.ry(self.theta, all_qubits)
self._circuit.measure_all()
self.backend = backend
self.shots = shots
def run(self, thetas):
t_qc = transpile(self._circuit, self.backend)
qobj = assemble(t_qc, shots=self.shots, parameter_binds = [{self.theta: theta} for theta in thetas])
job = self.backend.run(qobj)
result = job.result().get_counts()
counts = np.array(list(result.values()))
states = np.array(list(result.keys())).astype(float)
probabilities = counts / self.shots    # Compute probabilities for each state
expectation = np.sum(states * probabilities)  # Get state expectation
return np.array([expectation])
simulator = qiskit.Aer.get_backend('aer_simulator')
circuit = QuantumCircuit(1, simulator, 100)
print('Expected value for rotation pi {}'.format(circuit.run([np.pi])[0]))
circuit._circuit.draw() 
